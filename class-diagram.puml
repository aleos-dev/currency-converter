@startuml
package "Filters" {

    interface Filter {
        doFilter(request, response, chain)
    }

    class ExceptionHandlingFilter implements Filter
    class ResponseFilter implements Filter
    class CachingFilter implements Filter

    package "PreprocessingRequestFilters" {
        abstract class BaseRequestFilter implements Filters.Filter {
            +putPayloadToContext(Request, Response): void
            +validateRequest(Request, Response): void
        }

        class CurrencyFilter extends BaseRequestFilter
        class CurrenciesFilter extends BaseRequestFilter
        class ConversionRateFilter extends BaseRequestFilter
        class ConversionRatesFilter extends BaseRequestFilter
        class ConversionFilter extends BaseRequestFilter
    }
}


package "Servlet Layer" {
    abstract class HttpServlet {
        +service(Request, Response): void
    }

    class ConversionServlet extends HttpServlet
    class CurrencyServlet extends HttpServlet
    class CurrenciesServlet extends HttpServlet
    class ConversionRateServlet extends HttpServlet
    class ConversionRatesServlet extends HttpServlet

    note top of ConversionServlet : GET /conversion?from=*&to=*&amount=*
    note top of ConversionRateServlet : GET, PATH /conversionRate/*
    note bottom of ConversionRatesServlet : GET, POST /conversionRates
    note bottom of CurrencyServlet : GET /currency/*
    note bottom of CurrenciesServlet : GET, POST /currencies

}

package "Service Layer" {
    class CurrencyService
    class ConversionRateService
    class ConversionService
    class CacheService
}


package "DAO Layer" {
    abstract class CrudDao<E, K> {
        +save(entity: E): K
        +findById(key: K): Optional<E>
        +findAll(): List<K>
        +update(entity: E): void
        +delete(key: K): void
    }

    class CurrencyDAO extends CrudDao<Currency, Integer> {
        +findByCode(code: String): Optional<Currency>
    }
    class ConversionRateDAO extends CrudDao<ConversionRate, Integer> {
        +saveAndReturn(currency: Currency): ConversionRate
        +findByCode(code: String): Optional<ConversionRate>
        +updateRate(from: String, to: String, rate: BigDecimal): void
        +findCrossRateByCode(String code): Optional<ConversionRate>
    }
}

ExceptionHandlingFilter -right-> ResponseFilter : forwards
ResponseFilter -right-> CachingFilter: forwards
CachingFilter --> BaseRequestFilter: forwards
BaseRequestFilter --> HttpServlet : forwards

HttpServlet -right- "Service Layer" : "uses services"

"DAO Layer" <-left- "Service Layer" : uses
@enduml
